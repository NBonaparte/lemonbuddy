/*
 * Generated by gdbus-codegen 2.54.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __WATCHER_GENERATED_H__
#define __WATCHER_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.kde.StatusNotifierWatcher */

#define SNI_WATCHER_TYPE_ (sni_watcher__get_type ())
#define SNI_WATCHER_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SNI_WATCHER_TYPE_, SniWatcher))
#define SNI_WATCHER_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SNI_WATCHER_TYPE_))
#define SNI_WATCHER__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), SNI_WATCHER_TYPE_, SniWatcherIface))

struct _SniWatcher;
typedef struct _SniWatcher SniWatcher;
typedef struct _SniWatcherIface SniWatcherIface;

struct _SniWatcherIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_register_status_notifier_host) (
    SniWatcher *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service);

  gboolean (*handle_register_status_notifier_item) (
    SniWatcher *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service);

  gboolean  (*get_is_status_notifier_host_registered) (SniWatcher *object);

  gint  (*get_protocol_version) (SniWatcher *object);

  const gchar *const * (*get_registered_status_notifier_items) (SniWatcher *object);

  void (*status_notifier_host_registered) (
    SniWatcher *object);

  void (*status_notifier_host_unregistered) (
    SniWatcher *object);

  void (*status_notifier_item_registered) (
    SniWatcher *object,
    const gchar *arg_unnamed_arg0);

  void (*status_notifier_item_unregistered) (
    SniWatcher *object,
    const gchar *arg_unnamed_arg0);

};

GType sni_watcher__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *sni_watcher__interface_info (void);
guint sni_watcher__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void sni_watcher__complete_register_status_notifier_item (
    SniWatcher *object,
    GDBusMethodInvocation *invocation);

void sni_watcher__complete_register_status_notifier_host (
    SniWatcher *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void sni_watcher__emit_status_notifier_item_registered (
    SniWatcher *object,
    const gchar *arg_unnamed_arg0);

void sni_watcher__emit_status_notifier_item_unregistered (
    SniWatcher *object,
    const gchar *arg_unnamed_arg0);

void sni_watcher__emit_status_notifier_host_registered (
    SniWatcher *object);

void sni_watcher__emit_status_notifier_host_unregistered (
    SniWatcher *object);



/* D-Bus method calls: */
void sni_watcher__call_register_status_notifier_item (
    SniWatcher *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sni_watcher__call_register_status_notifier_item_finish (
    SniWatcher *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sni_watcher__call_register_status_notifier_item_sync (
    SniWatcher *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GError **error);

void sni_watcher__call_register_status_notifier_host (
    SniWatcher *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sni_watcher__call_register_status_notifier_host_finish (
    SniWatcher *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sni_watcher__call_register_status_notifier_host_sync (
    SniWatcher *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *sni_watcher__get_registered_status_notifier_items (SniWatcher *object);
gchar **sni_watcher__dup_registered_status_notifier_items (SniWatcher *object);
void sni_watcher__set_registered_status_notifier_items (SniWatcher *object, const gchar *const *value);

gboolean sni_watcher__get_is_status_notifier_host_registered (SniWatcher *object);
void sni_watcher__set_is_status_notifier_host_registered (SniWatcher *object, gboolean value);

gint sni_watcher__get_protocol_version (SniWatcher *object);
void sni_watcher__set_protocol_version (SniWatcher *object, gint value);


/* ---- */

#define SNI_WATCHER_TYPE__PROXY (sni_watcher__proxy_get_type ())
#define SNI_WATCHER__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SNI_WATCHER_TYPE__PROXY, SniWatcherProxy))
#define SNI_WATCHER__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SNI_WATCHER_TYPE__PROXY, SniWatcherProxyClass))
#define SNI_WATCHER__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SNI_WATCHER_TYPE__PROXY, SniWatcherProxyClass))
#define SNI_WATCHER_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SNI_WATCHER_TYPE__PROXY))
#define SNI_WATCHER_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SNI_WATCHER_TYPE__PROXY))

typedef struct _SniWatcherProxy SniWatcherProxy;
typedef struct _SniWatcherProxyClass SniWatcherProxyClass;
typedef struct _SniWatcherProxyPrivate SniWatcherProxyPrivate;

struct _SniWatcherProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SniWatcherProxyPrivate *priv;
};

struct _SniWatcherProxyClass
{
  GDBusProxyClass parent_class;
};

GType sni_watcher__proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SniWatcherProxy, g_object_unref)
#endif

void sni_watcher__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SniWatcher *sni_watcher__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SniWatcher *sni_watcher__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void sni_watcher__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SniWatcher *sni_watcher__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SniWatcher *sni_watcher__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define SNI_WATCHER_TYPE__SKELETON (sni_watcher__skeleton_get_type ())
#define SNI_WATCHER__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SNI_WATCHER_TYPE__SKELETON, SniWatcherSkeleton))
#define SNI_WATCHER__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SNI_WATCHER_TYPE__SKELETON, SniWatcherSkeletonClass))
#define SNI_WATCHER__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SNI_WATCHER_TYPE__SKELETON, SniWatcherSkeletonClass))
#define SNI_WATCHER_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SNI_WATCHER_TYPE__SKELETON))
#define SNI_WATCHER_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SNI_WATCHER_TYPE__SKELETON))

typedef struct _SniWatcherSkeleton SniWatcherSkeleton;
typedef struct _SniWatcherSkeletonClass SniWatcherSkeletonClass;
typedef struct _SniWatcherSkeletonPrivate SniWatcherSkeletonPrivate;

struct _SniWatcherSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SniWatcherSkeletonPrivate *priv;
};

struct _SniWatcherSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType sni_watcher__skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SniWatcherSkeleton, g_object_unref)
#endif

SniWatcher *sni_watcher__skeleton_new (void);


G_END_DECLS

#endif /* __WATCHER_GENERATED_H__ */
